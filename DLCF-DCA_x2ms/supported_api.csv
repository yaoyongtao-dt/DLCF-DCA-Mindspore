File,Start Line,End Line,Api,Type,Tips
pyabsa\core\apc\classic\__bert__\layers\attention.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,32,32,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,34,34,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,35,35,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,37,37,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,37,37,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,39,39,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,39,39,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,51,51,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,53,53,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,69,69,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,72,72,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,73,73,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,75,75,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,76,76,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,77,77,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,79,79,torch.nn.functional.tanh,SUPPORTED,"""torch.nn.functional.tanh"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_functional.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,79,79,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,81,81,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,83,83,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,86,86,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,87,87,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,88,88,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,88,88,torch.split,SUPPORTED,"The corresponding api of ""torch.split"" is ""mindspore.ops.Split"", will be converted to ""x2ms_adapter.split"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,101,101,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\attention.py,101,101,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,38,38,torch.nn.LSTM,SUPPORTED,"The corresponding api of ""torch.nn.LSTM"" is ""mindspore.nn.LSTM"", will be converted to ""x2ms_nn.LSTM"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,42,42,torch.nn.GRU,SUPPORTED,"The corresponding api of ""torch.nn.GRU"" is ""mindspore.nn.GRU"", will be converted to ""x2ms_nn.GRU"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,46,46,torch.nn.RNN,SUPPORTED,"""torch.nn.RNN"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.RNN"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,59,59,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,60,60,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,64,64,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,73,73,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,75,75,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,81,81,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,86,86,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\dynamic_rnn.py,88,88,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\point_wise_feed_forward.py,9,9,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\point_wise_feed_forward.py,16,16,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\point_wise_feed_forward.py,17,17,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\point_wise_feed_forward.py,18,18,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\point_wise_feed_forward.py,19,19,torch.nn.ReLU,SUPPORTED,"The corresponding api of ""torch.nn.ReLU"" is ""mindspore.nn.ReLU"", will be converted to ""x2ms_nn.ReLU"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\squeeze_embedding.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\squeeze_embedding.py,28,28,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\squeeze_embedding.py,29,29,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\squeeze_embedding.py,33,33,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\layers\squeeze_embedding.py,35,35,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,22,22,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,27,27,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,33,33,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,34,34,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,35,35,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,36,36,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,38,38,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,39,39,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\aoa_bert.py,39,39,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,22,22,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,22,22,torch.FloatTensor,SUPPORTED,"""torch.FloatTensor"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.FloatTensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,24,24,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,24,24,torch.FloatTensor,SUPPORTED,"""torch.FloatTensor"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.FloatTensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,29,29,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,30,30,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,31,31,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,38,38,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,48,48,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,49,49,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,69,69,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,69,69,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,84,84,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,84,84,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,89,89,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,90,90,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,91,91,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,92,92,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,98,98,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,99,99,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,101,101,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,102,102,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\asgcn_bert.py,103,103,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,14,14,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,29,29,torch.max,SUPPORTED,"The corresponding api of ""torch.max"" is ""mindspore.ops.ArgMaxWithValue"", will be converted to ""x2ms_adapter.x2ms_max"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,30,30,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,35,35,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,35,35,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,37,37,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,40,40,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,42,42,torch.squeeze,SUPPORTED,"The corresponding api of ""torch.squeeze"" is ""mindspore.ops.Squeeze"", will be converted to ""x2ms_adapter.squeeze"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\atae_lstm_bert.py,42,42,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,14,14,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,23,23,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,25,25,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,31,31,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,36,36,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,36,36,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,44,44,torch.sigmoid,SUPPORTED,"The corresponding api of ""torch.sigmoid"" is ""mindspore.ops.Sigmoid"", will be converted to ""x2ms_adapter.sigmoid"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,45,45,torch.sigmoid,SUPPORTED,"The corresponding api of ""torch.sigmoid"" is ""mindspore.ops.Sigmoid"", will be converted to ""x2ms_adapter.sigmoid"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,84,84,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,85,85,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,90,90,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,91,91,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,99,99,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,100,100,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,109,109,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,110,110,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,123,123,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,124,124,torch.tanh,SUPPORTED,"The corresponding api of ""torch.tanh"" is ""mindspore.ops.Tanh"", will be converted to ""x2ms_adapter.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,126,126,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,126,126,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,127,127,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\cabasc_bert.py,132,132,torch.tanh,SUPPORTED,"The corresponding api of ""torch.tanh"" is ""mindspore.ops.Tanh"", will be converted to ""x2ms_adapter.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,19,19,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,19,19,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,19,19,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,29,29,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,36,36,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,36,36,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,37,37,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,38,38,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,41,41,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,42,42,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ian_bert.py,49,49,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\lstm_bert.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\lstm_bert.py,19,19,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\lstm_bert.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,27,27,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,37,37,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,38,38,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,42,42,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,43,43,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,44,44,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,44,44,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,50,50,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\memnet_bert.py,51,51,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,40,40,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,44,44,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,48,48,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,48,48,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,53,53,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,58,58,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,63,63,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,73,73,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,73,73,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,74,74,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,74,74,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,76,76,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,83,83,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,84,84,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,85,85,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,86,86,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,93,93,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,94,94,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,97,97,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,98,98,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,102,102,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,103,103,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,104,104,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,104,104,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,108,108,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,109,109,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,110,110,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,111,111,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\mgan_bert.py,113,113,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,37,37,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,38,38,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,40,40,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,49,49,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,51,51,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,55,55,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,56,56,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,57,57,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,65,65,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,66,66,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,67,67,torch.zeros_like,SUPPORTED,"The corresponding api of ""torch.zeros_like"" is ""mindspore.ops.ZerosLike"", will be converted to ""x2ms_adapter.zeros_like"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,72,72,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,73,73,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,75,75,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,78,78,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\ram_bert.py,79,79,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,20,20,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,25,25,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,25,25,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,26,26,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,26,26,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,28,28,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,32,32,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,33,33,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,36,36,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,37,37,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tc_lstm_bert.py,43,43,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\td_lstm_bert.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\td_lstm_bert.py,20,20,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\td_lstm_bert.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\td_lstm_bert.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\td_lstm_bert.py,28,28,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,8,8,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,33,33,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,37,37,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,52,52,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,53,53,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,54,54,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,58,58,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,59,59,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,67,67,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,68,68,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,69,69,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,70,70,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,71,71,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,77,77,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__bert__\models\tnet_lf_bert.py,78,78,torch.nn.functional.max_pool1d,SUPPORTED,"The corresponding api of ""torch.nn.functional.max_pool1d"" is ""mindspore.nn.MaxPool1d"", will be converted to ""x2ms_adapter.nn_functional.max_pool1d"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,32,32,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,34,34,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,35,35,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,37,37,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,37,37,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,39,39,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,39,39,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,51,51,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,53,53,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,69,69,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,72,72,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,73,73,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,75,75,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,76,76,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,77,77,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,79,79,torch.nn.functional.tanh,SUPPORTED,"""torch.nn.functional.tanh"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_functional.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,79,79,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,81,81,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,83,83,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,86,86,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,87,87,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,88,88,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,88,88,torch.split,SUPPORTED,"The corresponding api of ""torch.split"" is ""mindspore.ops.Split"", will be converted to ""x2ms_adapter.split"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,101,101,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\attention.py,101,101,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,38,38,torch.nn.LSTM,SUPPORTED,"The corresponding api of ""torch.nn.LSTM"" is ""mindspore.nn.LSTM"", will be converted to ""x2ms_nn.LSTM"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,42,42,torch.nn.GRU,SUPPORTED,"The corresponding api of ""torch.nn.GRU"" is ""mindspore.nn.GRU"", will be converted to ""x2ms_nn.GRU"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,46,46,torch.nn.RNN,SUPPORTED,"""torch.nn.RNN"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.RNN"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,59,59,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,60,60,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,64,64,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,73,73,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,75,75,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,81,81,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,86,86,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\dynamic_rnn.py,88,88,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\point_wise_feed_forward.py,9,9,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\point_wise_feed_forward.py,16,16,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\point_wise_feed_forward.py,17,17,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\point_wise_feed_forward.py,18,18,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\point_wise_feed_forward.py,19,19,torch.nn.ReLU,SUPPORTED,"The corresponding api of ""torch.nn.ReLU"" is ""mindspore.nn.ReLU"", will be converted to ""x2ms_nn.ReLU"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\squeeze_embedding.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\squeeze_embedding.py,28,28,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\squeeze_embedding.py,29,29,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\squeeze_embedding.py,33,33,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\layers\squeeze_embedding.py,35,35,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,19,19,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,19,19,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,19,19,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,22,22,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,27,27,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,33,33,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,34,34,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,35,35,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,36,36,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,38,38,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,39,39,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\aoa.py,39,39,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,22,22,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,22,22,torch.FloatTensor,SUPPORTED,"""torch.FloatTensor"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.FloatTensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,24,24,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,24,24,torch.FloatTensor,SUPPORTED,"""torch.FloatTensor"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.FloatTensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,29,29,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,30,30,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,31,31,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,38,38,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,44,44,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,44,44,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,44,44,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,48,48,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,49,49,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,68,68,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,68,68,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,82,82,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,82,82,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,87,87,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,88,88,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,89,89,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,90,90,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,96,96,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,97,97,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,99,99,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,100,100,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\asgcn.py,101,101,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,14,14,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,20,20,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,20,20,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,20,20,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,29,29,torch.max,SUPPORTED,"The corresponding api of ""torch.max"" is ""mindspore.ops.ArgMaxWithValue"", will be converted to ""x2ms_adapter.x2ms_max"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,30,30,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,35,35,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,35,35,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,37,37,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,40,40,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,42,42,torch.squeeze,SUPPORTED,"The corresponding api of ""torch.squeeze"" is ""mindspore.ops.Squeeze"", will be converted to ""x2ms_adapter.squeeze"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\atae_lstm.py,42,42,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,14,14,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,21,21,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,21,21,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,21,21,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,23,23,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,25,25,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,31,31,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,36,36,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,36,36,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,44,44,torch.sigmoid,SUPPORTED,"The corresponding api of ""torch.sigmoid"" is ""mindspore.ops.Sigmoid"", will be converted to ""x2ms_adapter.sigmoid"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,45,45,torch.sigmoid,SUPPORTED,"The corresponding api of ""torch.sigmoid"" is ""mindspore.ops.Sigmoid"", will be converted to ""x2ms_adapter.sigmoid"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,84,84,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,85,85,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,90,90,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,91,91,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,99,99,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,100,100,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,109,109,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,110,110,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,123,123,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,124,124,torch.tanh,SUPPORTED,"The corresponding api of ""torch.tanh"" is ""mindspore.ops.Tanh"", will be converted to ""x2ms_adapter.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,126,126,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,126,126,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,127,127,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\cabasc.py,132,132,torch.tanh,SUPPORTED,"The corresponding api of ""torch.tanh"" is ""mindspore.ops.Tanh"", will be converted to ""x2ms_adapter.tanh"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,19,19,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,19,19,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,19,19,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,28,28,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,29,29,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,36,36,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,36,36,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,37,37,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,38,38,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,41,41,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,42,42,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ian.py,49,49,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,17,17,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,17,17,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,17,17,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,19,19,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\lstm.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,27,27,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,34,34,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,34,34,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,34,34,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,37,37,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,38,38,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,42,42,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,43,43,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,44,44,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,44,44,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,50,50,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\memnet.py,51,51,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,40,40,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,44,44,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,48,48,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,48,48,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,53,53,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,58,58,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,63,63,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,69,69,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,69,69,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,69,69,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,73,73,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,73,73,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,74,74,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,74,74,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,76,76,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,83,83,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,84,84,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,85,85,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,86,86,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,93,93,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,94,94,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,97,97,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,98,98,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,102,102,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,103,103,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,104,104,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,104,104,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,108,108,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,109,109,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,110,110,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,111,111,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\mgan.py,113,113,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,37,37,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,38,38,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,40,40,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,46,46,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,46,46,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,46,46,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,49,49,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,51,51,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,55,55,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,56,56,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,57,57,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,65,65,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,66,66,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,67,67,torch.zeros_like,SUPPORTED,"The corresponding api of ""torch.zeros_like"" is ""mindspore.ops.ZerosLike"", will be converted to ""x2ms_adapter.zeros_like"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,72,72,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,73,73,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,75,75,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,78,78,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\ram.py,79,79,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,17,17,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,17,17,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,17,17,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,20,20,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,25,25,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,25,25,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,26,26,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,26,26,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,28,28,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,32,32,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,33,33,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,36,36,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,37,37,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tc_lstm.py,43,43,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,17,17,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,17,17,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,17,17,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,20,20,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\td_lstm.py,28,28,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,8,8,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,33,33,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,37,37,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,43,43,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,43,43,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,43,43,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,52,52,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,53,53,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,54,54,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,58,58,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,59,59,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,67,67,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,68,68,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,69,69,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,70,70,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,71,71,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,77,77,torch.nn.functional.relu,SUPPORTED,"The corresponding api of ""torch.nn.functional.relu"" is ""mindspore.ops.ReLU"", will be converted to ""x2ms_adapter.nn_functional.relu"" by x2mindspore."
pyabsa\core\apc\classic\__glove__\models\tnet_lf.py,78,78,torch.nn.functional.max_pool1d,SUPPORTED,"The corresponding api of ""torch.nn.functional.max_pool1d"" is ""mindspore.nn.MaxPool1d"", will be converted to ""x2ms_adapter.nn_functional.max_pool1d"" by x2mindspore."
pyabsa\core\apc\models\bert_base.py,10,10,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\bert_base.py,17,17,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\bert_base.py,19,19,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\bert_spc.py,9,9,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\bert_spc.py,16,16,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\bert_spc.py,17,17,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,15,15,torch.zeros_like,SUPPORTED,"The corresponding api of ""torch.zeros_like"" is ""mindspore.ops.ZerosLike"", will be converted to ""x2ms_adapter.zeros_like"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,16,16,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,17,17,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,18,18,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,18,18,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,24,24,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,33,33,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,34,34,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,35,35,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,36,36,torch.nn.ReLU,SUPPORTED,"The corresponding api of ""torch.nn.ReLU"" is ""mindspore.nn.ReLU"", will be converted to ""x2ms_nn.ReLU"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,45,45,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,56,56,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,61,61,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,63,63,torch.nn.ModuleList,SUPPORTED,"The corresponding api of ""torch.nn.ModuleList"" is ""mindspore.nn.CellList"", will be converted to ""x2ms_nn.ModuleList"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,64,64,torch.nn.ModuleList,SUPPORTED,"The corresponding api of ""torch.nn.ModuleList"" is ""mindspore.nn.CellList"", will be converted to ""x2ms_nn.ModuleList"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,65,65,torch.nn.ModuleList,SUPPORTED,"The corresponding api of ""torch.nn.ModuleList"" is ""mindspore.nn.CellList"", will be converted to ""x2ms_nn.ModuleList"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,70,70,torch.nn.Sequential,SUPPORTED,"The corresponding api of ""torch.nn.Sequential"" is ""mindspore.nn.SequentialCell"", will be converted to ""x2ms_nn.Sequential"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,71,71,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,72,72,torch.nn.GELU,SUPPORTED,"The corresponding api of ""torch.nn.GELU"" is ""mindspore.nn.FastGelu"", will be converted to ""x2ms_nn.GELU"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,73,73,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,74,74,torch.nn.Sigmoid,SUPPORTED,"The corresponding api of ""torch.nn.Sigmoid"" is ""mindspore.nn.Sigmoid"", will be converted to ""x2ms_nn.Sigmoid"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,122,122,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,124,124,torch.ones,SUPPORTED,"The corresponding api of ""torch.ones"" is ""mindspore.ops.Ones"", will be converted to ""x2ms_adapter.ones"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,125,125,torch.ones,SUPPORTED,"The corresponding api of ""torch.ones"" is ""mindspore.ops.Ones"", will be converted to ""x2ms_adapter.ones"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,128,128,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,129,129,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\dlcf_dca_bert.py,136,136,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,15,15,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,22,22,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,24,24,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,39,39,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\fast_lcfs_bert.py,42,42,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,15,15,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,23,23,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,25,25,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,40,40,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert.py,43,43,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,16,16,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,24,24,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,29,29,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,42,42,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,45,45,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,46,46,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,47,47,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\apc\models\fast_lcf_bert_att.py,50,50,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,15,15,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,22,22,torch.nn.Embedding,SUPPORTED,"The corresponding api of ""torch.nn.Embedding"" is ""mindspore.nn.Embedding"", will be converted to ""x2ms_nn.Embedding"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,23,23,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,25,25,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,31,31,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,49,49,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,52,52,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\lca_bert.py,55,55,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,15,15,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,23,23,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,25,25,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,41,41,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\lcfs_bert.py,44,44,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,17,17,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,25,25,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,43,43,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\lcfs_dual_bert.py,46,46,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,21,21,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,23,23,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,39,39,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\lcf_bert.py,42,42,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,17,17,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,25,25,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,43,43,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\lcf_dual_bert.py,46,46,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\lcf_template_apc.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\lcf_template_apc.py,19,19,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,20,20,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,43,43,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,46,46,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,49,49,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,52,52,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,58,58,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,61,61,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,64,64,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,66,66,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcfs_bert.py,70,70,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,20,20,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,43,43,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,46,46,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,49,49,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,52,52,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,58,58,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,61,61,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,64,64,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,66,66,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\slide_lcf_bert.py,70,70,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,20,20,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,26,26,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,27,27,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,28,28,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,30,30,torch.nn.Embedding,SUPPORTED,"The corresponding api of ""torch.nn.Embedding"" is ""mindspore.nn.Embedding"", will be converted to ""x2ms_nn.Embedding"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,36,36,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,37,37,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,40,40,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,53,53,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,56,56,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,59,59,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,62,62,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,68,68,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,71,71,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,74,74,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,76,76,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_s.py,80,80,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,24,24,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,31,31,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,37,37,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,38,38,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,39,39,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,41,41,torch.nn.Embedding,SUPPORTED,"The corresponding api of ""torch.nn.Embedding"" is ""mindspore.nn.Embedding"", will be converted to ""x2ms_nn.Embedding"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,47,47,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,48,48,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,51,51,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,64,64,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,67,67,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,70,70,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,73,73,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,79,79,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,82,82,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,85,85,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,87,87,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\models\ssw_t.py,91,91,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,37,37,torch.nn.init.xavier_uniform_,SUPPORTED,"The corresponding api of ""torch.nn.init.xavier_uniform_"" is ""mindspore.common.initializer.XavierUniform"", will be converted to ""x2ms_adapter.nn_init.xavier_uniform_"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,38,38,torch.nn.init.xavier_normal,SUPPORTED,"""torch.nn.init.xavier_normal"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.xavier_normal"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,39,39,torch.nn.init.orthogonal_,SUPPORTED,"""torch.nn.init.orthogonal_"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.orthogonal_"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,119,119,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,120,120,torch.cuda.manual_seed,SUPPORTED,"""torch.cuda.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\apc\prediction\sentiment_classifier.py,205,205,torch.softmax,SUPPORTED,"""torch.softmax"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.softmax"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,102,102,torch.cuda.memory_allocated,SUPPORTED,"""torch.cuda.memory_allocated"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.memory_allocated"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,107,107,torch.nn.init.xavier_uniform_,SUPPORTED,"The corresponding api of ""torch.nn.init.xavier_uniform_"" is ""mindspore.common.initializer.XavierUniform"", will be converted to ""x2ms_adapter.nn_init.xavier_uniform_"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,108,108,torch.nn.init.xavier_normal_,SUPPORTED,"""torch.nn.init.xavier_normal_"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.xavier_normal_"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,109,109,torch.nn.init.orthogonal_,SUPPORTED,"""torch.nn.init.orthogonal_"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.orthogonal_"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,135,135,torch.nn.init.uniform_,SUPPORTED,"The corresponding api of ""torch.nn.init.uniform_"" is ""mindspore.common.initializer.Uniform"", will be converted to ""x2ms_adapter.nn_init.uniform_"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,156,156,torch.utils.data.ConcatDataset,SUPPORTED,"""torch.utils.data.ConcatDataset"" has no corresponding api in MindSpore, will be converted to adapted api ""util_api.ConcatDataset"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,462,462,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,469,469,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,470,470,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,473,473,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,491,491,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,492,492,torch.cuda.manual_seed,SUPPORTED,"""torch.cuda.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\apc\training\apc_trainer.py,503,503,torch.device,SUPPORTED,"""torch.device"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.Device"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,32,32,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,35,35,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,36,36,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,39,39,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,49,49,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,57,57,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,78,78,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\bert_base_atepc.py,78,78,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,27,27,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,31,31,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,34,34,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,44,44,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,52,52,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,74,74,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,74,74,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,87,87,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,89,89,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,92,92,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,94,94,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,97,97,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,98,98,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcfs_atepc.py,99,99,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,27,27,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,31,31,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,34,34,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,44,44,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,52,52,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,74,74,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,74,74,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,87,87,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,89,89,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,92,92,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,94,94,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,97,97,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,98,98,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\fast_lcf_atepc.py,99,99,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,26,26,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,29,29,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,43,43,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,51,51,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,73,73,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,73,73,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,87,87,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,87,87,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,97,97,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,99,99,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,102,102,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,104,104,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,107,107,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,108,108,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc.py,109,109,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,29,29,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,32,32,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,36,36,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,46,46,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,54,54,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,76,76,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,76,76,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,90,90,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,90,90,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,100,100,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,102,102,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,105,105,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,107,107,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,110,110,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,111,111,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcfs_atepc_large.py,112,112,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,26,26,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,29,29,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,30,30,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,43,43,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,51,51,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,73,73,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,73,73,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,87,87,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,87,87,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,97,97,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,99,99,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,102,102,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,104,104,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,107,107,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,108,108,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc.py,109,109,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,29,29,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,32,32,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,36,36,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,46,46,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,54,54,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,76,76,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,76,76,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,90,90,torch.zeros,SUPPORTED,"The corresponding api of ""torch.zeros"" is ""mindspore.ops.Zeros"", will be converted to ""x2ms_adapter.zeros"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,90,90,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,100,100,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,102,102,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,105,105,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,107,107,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,110,110,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,111,111,torch.mul,SUPPORTED,"The corresponding api of ""torch.mul"" is ""mindspore.ops.Mul"", will be converted to ""x2ms_adapter.mul"" by x2mindspore."
pyabsa\core\atepc\models\lcf_atepc_large.py,112,112,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\models\lcf_template_atepc.py,23,23,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\atepc\models\lcf_template_atepc.py,33,33,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\models\lcf_template_atepc.py,41,41,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,37,37,torch.optim.Adadelta,SUPPORTED,"The corresponding api of ""torch.optim.Adadelta"" is ""mindspore.ops.ApplyAdadelta"", will be converted to ""optim_register.adadelta"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,38,38,torch.optim.Adagrad,SUPPORTED,"The corresponding api of ""torch.optim.Adagrad"" is ""mindspore.nn.Adagrad"", will be converted to ""optim_register.adagrad"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,39,39,torch.optim.Adam,SUPPORTED,"The corresponding api of ""torch.optim.Adam"" is ""mindspore.nn.Adam"", will be converted to ""optim_register.adam"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,40,40,torch.optim.Adamax,SUPPORTED,"The corresponding api of ""torch.optim.Adamax"" is ""mindspore.ops.ApplyAdaMax"", will be converted to ""optim_register.adamax"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,41,41,torch.optim.ASGD,SUPPORTED,"""torch.optim.ASGD"" has no corresponding api in MindSpore, will be converted to adapted api ""optim_register.asgd"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,42,42,torch.optim.RMSprop,SUPPORTED,"The corresponding api of ""torch.optim.RMSprop"" is ""mindspore.nn.RMSProp"", will be converted to ""optim_register.rmsprop"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,43,43,torch.optim.SGD,SUPPORTED,"The corresponding api of ""torch.optim.SGD"" is ""mindspore.nn.SGD"", will be converted to ""optim_register.sgd"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,44,44,torch.optim.AdamW,SUPPORTED,"The corresponding api of ""torch.optim.AdamW"" is ""mindspore.nn.AdamWeightDecay"", will be converted to ""optim_register.adamw"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,96,96,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,239,239,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,239,239,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,240,240,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,240,240,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,241,241,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,241,241,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,242,242,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,242,242,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,243,243,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,243,243,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,244,244,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,244,244,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,245,245,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,245,245,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,251,251,torch.utils.data.SequentialSampler,SUPPORTED,"The corresponding api of ""torch.utils.data.SequentialSampler"" is ""mindspore.dataset.SequentialSampler"", will be converted to ""x2ms_datasets.SequentialSampler"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,274,274,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,274,274,torch.nn.functional.log_softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.log_softmax"" is ""mindspore.nn.LogSoftmax"", will be converted to ""x2ms_adapter.nn_functional.log_softmax"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,320,320,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,320,320,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,321,321,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,321,321,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,322,322,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,322,322,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,323,323,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,323,323,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,324,324,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,324,324,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,325,325,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,325,325,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,326,326,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,326,326,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,327,327,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,327,327,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,335,335,torch.utils.data.SequentialSampler,SUPPORTED,"The corresponding api of ""torch.utils.data.SequentialSampler"" is ""mindspore.dataset.SequentialSampler"", will be converted to ""x2ms_datasets.SequentialSampler"" by x2mindspore."
pyabsa\core\atepc\prediction\aspect_extractor.py,373,373,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,46,46,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,47,47,torch.cuda.manual_seed,SUPPORTED,"""torch.cuda.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,53,53,torch.optim.Adam,SUPPORTED,"The corresponding api of ""torch.optim.Adam"" is ""mindspore.nn.Adam"", will be converted to ""optim_register.adam"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,54,54,torch.optim.AdamW,SUPPORTED,"The corresponding api of ""torch.optim.AdamW"" is ""mindspore.nn.AdamWeightDecay"", will be converted to ""optim_register.adamw"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,70,70,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,70,70,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,71,71,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,71,71,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,72,72,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,72,72,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,73,73,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,73,73,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,74,74,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,74,74,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,75,75,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,75,75,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,76,76,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,76,76,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,77,77,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,77,77,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,78,78,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,78,78,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,83,83,torch.utils.data.SequentialSampler,SUPPORTED,"The corresponding api of ""torch.utils.data.SequentialSampler"" is ""mindspore.dataset.SequentialSampler"", will be converted to ""x2ms_datasets.SequentialSampler"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,90,90,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,90,90,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,91,91,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,91,91,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,92,92,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,92,92,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,93,93,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,93,93,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,94,94,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,94,94,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,95,95,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,95,95,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,96,96,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,96,96,torch.long,SUPPORTED,"""torch.long"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.int64"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,97,97,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,97,97,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,98,98,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,98,98,torch.float32,SUPPORTED,"""torch.float32"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,103,103,torch.utils.data.RandomSampler,SUPPORTED,"The corresponding api of ""torch.utils.data.RandomSampler"" is ""mindspore.dataset.RandomSampler"", will be converted to ""x2ms_datasets.RandomSampler"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,298,298,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,305,305,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,306,306,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,311,311,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,311,311,torch.nn.functional.log_softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.log_softmax"" is ""mindspore.nn.LogSoftmax"", will be converted to ""x2ms_adapter.nn_functional.log_softmax"" by x2mindspore."
pyabsa\core\atepc\training\atepc_trainer.py,331,331,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,13,13,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,32,32,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,33,33,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,34,34,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,35,35,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,37,37,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,37,37,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,39,39,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,39,39,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,51,51,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,53,53,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,69,69,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,72,72,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,73,73,torch.div,SUPPORTED,"The corresponding api of ""torch.div"" is ""mindspore.ops.Div"", will be converted to ""x2ms_adapter.div"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,75,75,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,76,76,torch.unsqueeze,SUPPORTED,"The corresponding api of ""torch.unsqueeze"" is ""mindspore.ops.ExpandDims"", will be converted to ""x2ms_adapter.unsqueeze"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,77,77,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,79,79,torch.nn.functional.tanh,SUPPORTED,"""torch.nn.functional.tanh"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_functional.tanh"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,79,79,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,81,81,torch.matmul,SUPPORTED,"The corresponding api of ""torch.matmul"" is ""mindspore.nn.MatMul"", will be converted to ""x2ms_adapter.matmul"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,83,83,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,86,86,torch.nn.functional.softmax,SUPPORTED,"The corresponding api of ""torch.nn.functional.softmax"" is ""mindspore.ops.Softmax"", will be converted to ""x2ms_adapter.nn_functional.softmax"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,87,87,torch.bmm,SUPPORTED,"The corresponding api of ""torch.bmm"" is ""mindspore.ops.BatchMatMul"", will be converted to ""x2ms_adapter.bmm"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,88,88,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,88,88,torch.split,SUPPORTED,"The corresponding api of ""torch.split"" is ""mindspore.ops.Split"", will be converted to ""x2ms_adapter.split"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,101,101,torch.nn.Parameter,SUPPORTED,"The corresponding api of ""torch.nn.Parameter"" is ""mindspore.Parameter"", will be converted to ""mindspore.Parameter"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\attention.py,101,101,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,38,38,torch.nn.LSTM,SUPPORTED,"The corresponding api of ""torch.nn.LSTM"" is ""mindspore.nn.LSTM"", will be converted to ""x2ms_nn.LSTM"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,42,42,torch.nn.GRU,SUPPORTED,"The corresponding api of ""torch.nn.GRU"" is ""mindspore.nn.GRU"", will be converted to ""x2ms_nn.GRU"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,46,46,torch.nn.RNN,SUPPORTED,"""torch.nn.RNN"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.RNN"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,59,59,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,60,60,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,64,64,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,73,73,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,75,75,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,81,81,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,86,86,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\dynamic_rnn.py,88,88,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\point_wise_feed_forward.py,9,9,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\point_wise_feed_forward.py,16,16,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\point_wise_feed_forward.py,17,17,torch.nn.Conv1d,SUPPORTED,"The corresponding api of ""torch.nn.Conv1d"" is ""mindspore.nn.Conv1d"", will be converted to ""x2ms_nn.Conv1d"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\point_wise_feed_forward.py,18,18,torch.nn.Dropout,SUPPORTED,"The corresponding api of ""torch.nn.Dropout"" is ""mindspore.nn.Dropout"", will be converted to ""x2ms_nn.Dropout"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\point_wise_feed_forward.py,19,19,torch.nn.ReLU,SUPPORTED,"The corresponding api of ""torch.nn.ReLU"" is ""mindspore.nn.ReLU"", will be converted to ""x2ms_nn.ReLU"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\squeeze_embedding.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\squeeze_embedding.py,28,28,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\squeeze_embedding.py,29,29,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\squeeze_embedding.py,33,33,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\layers\squeeze_embedding.py,35,35,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\models\bert.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\models\bert.py,19,19,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\tc\classic\__bert__\models\bert.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,11,11,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,38,38,torch.nn.LSTM,SUPPORTED,"The corresponding api of ""torch.nn.LSTM"" is ""mindspore.nn.LSTM"", will be converted to ""x2ms_nn.LSTM"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,42,42,torch.nn.GRU,SUPPORTED,"The corresponding api of ""torch.nn.GRU"" is ""mindspore.nn.GRU"", will be converted to ""x2ms_nn.GRU"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,46,46,torch.nn.RNN,SUPPORTED,"""torch.nn.RNN"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.RNN"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,59,59,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,60,60,torch.sort,SUPPORTED,"The corresponding api of ""torch.sort"" is ""mindspore.ops.Sort"", will be converted to ""x2ms_adapter.sort"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,64,64,torch.nn.utils.rnn.pack_padded_sequence,SUPPORTED,"""torch.nn.utils.rnn.pack_padded_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pack_padded_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,73,73,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,75,75,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,81,81,torch.nn.utils.rnn.pad_packed_sequence,SUPPORTED,"""torch.nn.utils.rnn.pad_packed_sequence"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.pad_packed_sequence"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,86,86,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\layers\dynamic_rnn.py,88,88,torch.transpose,SUPPORTED,"The corresponding api of ""torch.transpose"" is ""mindspore.ops.Transpose"", will be converted to ""x2ms_adapter.transpose"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,17,17,torch.nn.Embedding.from_pretrained,SUPPORTED,"""torch.nn.Embedding.from_pretrained"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_nn.Embedding.from_pretrained"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,17,17,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,17,17,torch.float,SUPPORTED,"""torch.float"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.float32"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,19,19,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\core\tc\classic\__glove__\models\lstm.py,24,24,torch.sum,SUPPORTED,"The corresponding api of ""torch.sum"" is ""mindspore.ops.ReduceSum"", will be converted to ""x2ms_adapter.x2ms_sum"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,35,35,torch.nn.init.xavier_uniform_,SUPPORTED,"The corresponding api of ""torch.nn.init.xavier_uniform_"" is ""mindspore.common.initializer.XavierUniform"", will be converted to ""x2ms_adapter.nn_init.xavier_uniform_"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,36,36,torch.nn.init.xavier_normal,SUPPORTED,"""torch.nn.init.xavier_normal"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.xavier_normal"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,37,37,torch.nn.init.orthogonal_,SUPPORTED,"""torch.nn.init.orthogonal_"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.nn_init.orthogonal_"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,115,115,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,116,116,torch.cuda.manual_seed,SUPPORTED,"""torch.cuda.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,145,145,torch.prod,SUPPORTED,"The corresponding api of ""torch.prod"" is ""mindspore.ops.ReduceProd"", will be converted to ""x2ms_adapter.prod"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,145,145,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\core\tc\prediction\text_classifier.py,215,215,torch.softmax,SUPPORTED,"""torch.softmax"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.softmax"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,86,86,torch.cuda.memory_allocated,SUPPORTED,"""torch.cuda.memory_allocated"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.memory_allocated"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,122,122,torch.utils.data.ConcatDataset,SUPPORTED,"""torch.utils.data.ConcatDataset"" has no corresponding api in MindSpore, will be converted to adapted api ""util_api.ConcatDataset"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,409,409,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,416,416,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,417,417,torch.cat,SUPPORTED,"The corresponding api of ""torch.cat"" is ""mindspore.ops.Concat"", will be converted to ""x2ms_adapter.cat"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,420,420,torch.argmax,SUPPORTED,"The corresponding api of ""torch.argmax"" is ""mindspore.ops.Argmax"", will be converted to ""x2ms_adapter.argmax"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,439,439,torch.manual_seed,SUPPORTED,"""torch.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,440,440,torch.cuda.manual_seed,SUPPORTED,"""torch.cuda.manual_seed"" has no corresponding api in MindSpore, will be converted to adapted api ""mindspore.set_seed"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,443,443,torch.optim.Adadelta,SUPPORTED,"The corresponding api of ""torch.optim.Adadelta"" is ""mindspore.ops.ApplyAdadelta"", will be converted to ""optim_register.adadelta"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,444,444,torch.optim.Adagrad,SUPPORTED,"The corresponding api of ""torch.optim.Adagrad"" is ""mindspore.nn.Adagrad"", will be converted to ""optim_register.adagrad"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,445,445,torch.optim.Adam,SUPPORTED,"The corresponding api of ""torch.optim.Adam"" is ""mindspore.nn.Adam"", will be converted to ""optim_register.adam"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,446,446,torch.optim.Adamax,SUPPORTED,"The corresponding api of ""torch.optim.Adamax"" is ""mindspore.ops.ApplyAdaMax"", will be converted to ""optim_register.adamax"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,447,447,torch.optim.ASGD,SUPPORTED,"""torch.optim.ASGD"" has no corresponding api in MindSpore, will be converted to adapted api ""optim_register.asgd"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,448,448,torch.optim.RMSprop,SUPPORTED,"The corresponding api of ""torch.optim.RMSprop"" is ""mindspore.nn.RMSProp"", will be converted to ""optim_register.rmsprop"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,449,449,torch.optim.SGD,SUPPORTED,"The corresponding api of ""torch.optim.SGD"" is ""mindspore.nn.SGD"", will be converted to ""optim_register.sgd"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,450,450,torch.optim.AdamW,SUPPORTED,"The corresponding api of ""torch.optim.AdamW"" is ""mindspore.nn.AdamWeightDecay"", will be converted to ""optim_register.adamw"" by x2mindspore."
pyabsa\core\tc\training\classifier_trainer.py,460,460,torch.device,SUPPORTED,"""torch.device"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.Device"" by x2mindspore."
pyabsa\network\lcf_pooler.py,12,12,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\network\lcf_pooler.py,16,16,torch.nn.Linear,SUPPORTED,"The corresponding api of ""torch.nn.Linear"" is ""mindspore.nn.Dense"", will be converted to ""x2ms_nn.Linear"" by x2mindspore."
pyabsa\network\lcf_pooler.py,17,17,torch.nn.Tanh,SUPPORTED,"The corresponding api of ""torch.nn.Tanh"" is ""mindspore.nn.Tanh"", will be converted to ""x2ms_nn.Tanh"" by x2mindspore."
pyabsa\network\lcf_pooler.py,29,29,torch.Tensor,SUPPORTED,"The corresponding api of ""torch.Tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.Tensor"" by x2mindspore."
pyabsa\network\sa_encoder.py,14,14,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\network\sa_encoder.py,19,19,torch.nn.ModuleList,SUPPORTED,"The corresponding api of ""torch.nn.ModuleList"" is ""mindspore.nn.CellList"", will be converted to ""x2ms_nn.ModuleList"" by x2mindspore."
pyabsa\network\sa_encoder.py,20,20,torch.nn.Tanh,SUPPORTED,"The corresponding api of ""torch.nn.Tanh"" is ""mindspore.nn.Tanh"", will be converted to ""x2ms_nn.Tanh"" by x2mindspore."
pyabsa\network\sa_encoder.py,28,28,torch.nn.Module,SUPPORTED,"The corresponding api of ""torch.nn.Module"" is ""mindspore.nn.Cell"", will be converted to ""nn.Cell"" by x2mindspore."
pyabsa\network\sa_encoder.py,37,37,torch.tensor,SUPPORTED,"The corresponding api of ""torch.tensor"" is ""mindspore.Tensor"", will be converted to ""x2ms_adapter.x2ms_tensor"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,92,92,torch.device,SUPPORTED,"""torch.device"" has no corresponding api in MindSpore, will be converted to adapted api ""x2ms_adapter.Device"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,170,170,torch.optim.Adadelta,SUPPORTED,"The corresponding api of ""torch.optim.Adadelta"" is ""mindspore.ops.ApplyAdadelta"", will be converted to ""optim_register.adadelta"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,171,171,torch.optim.Adagrad,SUPPORTED,"The corresponding api of ""torch.optim.Adagrad"" is ""mindspore.nn.Adagrad"", will be converted to ""optim_register.adagrad"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,172,172,torch.optim.Adam,SUPPORTED,"The corresponding api of ""torch.optim.Adam"" is ""mindspore.nn.Adam"", will be converted to ""optim_register.adam"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,173,173,torch.optim.Adamax,SUPPORTED,"The corresponding api of ""torch.optim.Adamax"" is ""mindspore.ops.ApplyAdaMax"", will be converted to ""optim_register.adamax"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,174,174,torch.optim.ASGD,SUPPORTED,"""torch.optim.ASGD"" has no corresponding api in MindSpore, will be converted to adapted api ""optim_register.asgd"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,175,175,torch.optim.RMSprop,SUPPORTED,"The corresponding api of ""torch.optim.RMSprop"" is ""mindspore.nn.RMSProp"", will be converted to ""optim_register.rmsprop"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,176,176,torch.optim.SGD,SUPPORTED,"The corresponding api of ""torch.optim.SGD"" is ""mindspore.nn.SGD"", will be converted to ""optim_register.sgd"" by x2mindspore."
pyabsa\utils\pyabsa_utils.py,177,177,torch.optim.AdamW,SUPPORTED,"The corresponding api of ""torch.optim.AdamW"" is ""mindspore.nn.AdamWeightDecay"", will be converted to ""optim_register.adamw"" by x2mindspore."
